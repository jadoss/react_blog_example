{"version":3,"sources":["apis/jsonPlaceholder.js","actions/index.js","components/UserHeader.js","components/PostList.js","components/App.js","reducers/index.js","reducers/postsReducer.js","reducers/usersReducers.js","index.js"],"names":["axios","create","baseURL","fetchPosts","dispatch","a","jsonPlaceholder","get","response","type","payload","data","fetchUser","id","UserHeader","user","this","props","className","name","React","Component","connect","state","ownProps","users","find","userId","PostList","fetchPostsAndUsers","posts","map","post","key","title","body","renderList","getState","_","chain","uniq","forEach","value","App","combineReducers","action","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"0QAEeA,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,yC,iBCaAC,EAAa,yDAAM,WAAMC,GAAN,eAAAC,EAAA,sEACDC,EAAgBC,IAAI,UADnB,OAClBC,EADkB,OAGxBJ,EAAS,CAAEK,KAAM,cAAeC,QAASF,EAASG,OAH1B,2CAAN,uDAMbC,EAAY,SAAAC,GAAE,8CAAI,WAAMT,GAAN,eAAAC,EAAA,sEACAC,EAAgBC,IAAhB,iBAA8BM,IAD9B,OACjBL,EADiB,OAG3BJ,EAAS,CAAEK,KAAM,aAAcC,QAASF,EAASG,OAHtB,2CAAJ,uDCnBrBG,E,iLACQ,IACEC,EAASC,KAAKC,MAAdF,KAER,OAAIA,EAIG,yBAAKG,UAAU,UAAUH,EAAKI,MAH1B,S,GALMC,IAAMC,WAgBhBC,eAJS,SAACC,EAAOC,GAC5B,MAAO,CAAEC,MAAOF,EAAME,MAAMC,MAAK,SAAAX,GAAI,OAAIA,EAAKF,KAAOW,EAASG,aAGnDL,CAAyBR,GCdlCc,E,4LAEEZ,KAAKC,MAAMY,uB,mCAIX,OAAOb,KAAKC,MAAMa,MAAMC,KAAI,SAAAC,GACxB,OACI,yBAAKd,UAAU,OAAOe,IAAKD,EAAKnB,IAC5B,uBAAGK,UAAU,mCACb,yBAAKA,UAAU,WACX,yBAAKA,UAAU,eACX,4BAAKc,EAAKE,OACV,2BAAIF,EAAKG,OAEb,kBAAC,EAAD,CAAYR,OAAQK,EAAKL,gB,+BAQzC,OAAO,yBAAKT,UAAU,2BAA2BF,KAAKoB,kB,GAvBvChB,IAAMC,WA+BdC,eAJS,SAAAC,GACpB,MAAO,CAAEO,MAAOP,EAAMO,SAKtB,CAAED,mBFnC4B,yDAAM,WAAOzB,EAAUiC,GAAjB,SAAAhC,EAAA,sEAC9BD,EAASD,KADqB,OAMpCmC,IAAEC,MAAMF,IAAWP,OAClBC,IAAI,UACJS,OACAC,SAAQ,SAAA5B,GAAE,OAAIT,EAASQ,EAAUC,OACjC6B,QAVmC,2CAAN,0DEiCnBpB,CAGTM,GC5BSe,EARH,WACR,OACG,yBAAKzB,UAAU,gBACX,kBAAC,EAAD,Q,QCFI0B,cAAgB,CAC3Bd,MCLW,WAAyB,IAAxBP,EAAuB,uDAAf,GAAIsB,EAAW,uCACnC,OAAQA,EAAOpC,MACX,IAAK,cACD,OAAOoC,EAAOnC,QAClB,QACI,OAAOa,IDCfE,MENW,WAAyB,IAAxBF,EAAuB,uDAAf,GAAIsB,EAAW,uCACnC,OAAQA,EAAOpC,MACX,IAAK,cACD,MAAM,GAAN,mBAAWc,GAAX,CAAkBsB,EAAOnC,UACzB,QACI,OAAOa,MCIjBuB,EAAQC,YAAYC,EAAUC,YAAgBC,MAEpDC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,OAEJO,SAASC,cAAc,Y","file":"static/js/main.08c71bea.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'https://jsonplaceholder.typicode.com'\n});","import jsonPlaceholder from '../apis/jsonPlaceholder';\nimport _ from 'lodash';\n\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\n    await dispatch(fetchPosts());\n\n    // const userIds = _.uniq(_.map(getState().posts, 'userId'));\n    // userIds.forEach(id => dispatch(fetchUser(id)));\n\n    _.chain(getState().posts)\n    .map('userId')\n    .uniq()\n    .forEach(id => dispatch(fetchUser(id)))\n    .value();\n};\n\nexport const fetchPosts = () => async dispatch => {\n        const response = await jsonPlaceholder.get('/posts');\n\n        dispatch({ type: 'FETCH_POSTS', payload: response.data});\n    };\n\nexport const fetchUser = id => async dispatch => {\n        const response = await jsonPlaceholder.get(`/users/${id}`);\n\n    dispatch({ type: 'FETCH_USER', payload: response.data });\n};\n\n// export const fetchUser = id => dispatch => _fetchUser(id, dispatch);\n// const _fetchUser = _.memoize(async (id, dispatch) => {\n//     const response = await jsonPlaceholder.get(`/users/${id}`);\n\n//     dispatch({ type: 'FETCH_USER', payload: response.data });\n// });","import React from 'react';\nimport { connect } from 'react-redux';\n\nclass UserHeader extends React.Component {\n    render() {\n        const { user } = this.props;\n\n        if(!user) {\n            return null;\n        }\n\n        return <div className=\"header\">{user.name}</div>;\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return { users: state.users.find(user => user.id === ownProps.userId ) };\n};\n\nexport default connect(mapStateToProps)(UserHeader);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPostsAndUsers } from '../actions';\nimport UserHeader from './UserHeader';\n\nclass PostList extends React.Component {\n    componentDidMount() {\n        this.props.fetchPostsAndUsers();\n    }\n\n    renderList() {\n        return this.props.posts.map(post => {\n            return (\n                <div className=\"item\" key={post.id}>\n                    <i className=\"large middle aligned icon user\" />\n                    <div className=\"content\">\n                        <div className=\"description\">\n                            <h2>{post.title}</h2>\n                            <p>{post.body}</p>\n                        </div>\n                        <UserHeader userId={post.userId} />\n                    </div>\n                </div>\n            );\n        });\n    }\n\n    render() {\n        return <div className=\"ui relaxed divided list\">{this.renderList()}</div>;\n    }\n}\n\nconst mapStateToProps = state => {\n    return { posts: state.posts };\n};\n\nexport default connect(\n    mapStateToProps, \n    { fetchPostsAndUsers }\n    )(PostList);","import React from 'react';\nimport PostList from './PostList';\n\nconst App = () => {\n    return (\n       <div className=\"ui container\">\n           <PostList />\n        </div> \n    );\n};\n\nexport default App;","import { combineReducers } from 'redux';\nimport postsReducer from './postsReducer';\nimport usersReducer from './usersReducers';\n\nexport default combineReducers({\n    posts: postsReducer,\n    users: usersReducer\n});","export default (state = [], action) => {\n    switch (action.type) {\n        case 'FETCH_POSTS':\n            return action.payload;\n        default:\n            return state;\n    }\n};","export default (state = [], action) => {\n    switch (action.type) {\n        case 'FETCH_USERS':\n            return [...state, action.payload];\n            default:\n                return state;\n    }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.querySelector('#root')\n);"],"sourceRoot":""}